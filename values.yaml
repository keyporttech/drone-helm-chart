appVersion: "1.0.0-rc.3"

images:
  ## The official drone (server) image, change tag to use a different version.
  ## ref: https://hub.docker.com/r/drone/drone/tags/
  ##
  server:
    repository: "docker.io/drone/drone"
    tag: 1.0.0-rc.3
    pullPolicy: IfNotPresent
    secrets: docker.io/drone/kubernetes-secrets:latest

service:
  httpPort: 80

  ## If service.type is not set to NodePort, the following statement
  ## will be ignored.
  ##
  # nodePort: 32015

  ## Service type can be set to ClusterIP, NodePort or LoadBalancer.
  ##
  type: ClusterIP

  ## Drone Service annotations
  ##
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
  #   service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:xx-xxxx-x:xxxxxxxxxxx:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx
  #   external-dns.alpha.kubernetes.io/hostname: drone.domain.tld.

ingress:
  ## If true, Drone Ingress will be created.
  ##
  enabled: false

  ## Drone Ingress annotations
  ##
  # annotations:
  #   kubernetes.io/ingress.class: nginx
  #   kubernetes.io/tls-acme: 'true'

  ## Drone hostnames must be provided if Ingress is enabled
  ##
  # hosts:
  #   - drone.domain.io

  ## Drone Ingress TLS configuration secrets
  ## Must be manually created in the namespace
  ##
  # tls:
  #   - secretName: drone-tls
  #     hosts:
  #       - drone.domain.io

# secret key used by the kubernetes secret manager - if not specified a random value is generated
# secretKey: 1234567890ABCDEF

server:


  ## account to bootstrap as an admin user when the server starts
  #adminAccount: octocat

  serviceAccount: drone-runner

  ## Drone server configuration.
  ## Values in here get injected as environment variables.
  ## ref: http://readme.drone.io/admin/installation-reference
  ##
  env:
    DRONE_DEBUG: "false"

    DRONE_GITHUB_SERVER: https://github.com
    DRONE_GITHUB_SKIP_VERIFY: true

    # replace with your values - TODO: use secrets
    DRONE_GITHUB_CLIENT_ID: "1234567890"
    DRONE_GITHUB_CLIENT_SECRET: "ABCDEFGHIHKLMNOPQRSTUBQXYZ"
    DRONE_RPC_SECRET:

  ## Secret environment variables are configured in `server.envSecrets`.
  ## Each item in `server.envSecrets` references a Kubernetes Secret.
  ## These Secrets should be created before they are referenced.
  ##
# to use this existing Secrets if this is active the values in envSecrets is ignored
# exstingSecret: <MY_SECRET_NAME>

## Uncomment or add to these to create a secret used by the drone deployment.  For those inclined for better security let the chart genreate the secret copy it to a different secret outside then then remove the senistive values but keep the keys then set the exisitng secret value.
envSecrets:
  DRONE_DATABASE_DRIVER: "sqlite3"
  DRONE_DATABASE_DATASOURCE: "/var/lib/drone/drone.sqlite"
#   DRONE_RPC_SECRET: <supersecret>
#
# if using github Authentication
#   DRONE_GITHUB_CLIENT_ID: <generated by github>
#   DRONE_GITHUB_CLIENT_SECRET: <generated by github>
#
# if using gitea
#   DRONE_GITEA_SERVER: <YOUR GITEA SERVER ADDR>
#
# if you want drone to authenticate git always (ex: for private repos)
#  DRONE_GIT_ALWAYS_AUTH: ""
#If using postgres
#  DRONE_DATABASE_DATASOURCE: postgres://user:password@postgres-db-postgresql.dev.svc.cluster.local:5432/postgres?sslmode=disable

  annotations: {}

  ## CPU and memory limits for drone server
  ##
  resources: {}
  #  requests:
  #    memory: 32Mi
  #    cpu: 40m
  #  limits:
  #    memory: 2Gi
  #    cpu: 1

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection
  ##
  nodeSelector: {}

  ## additional siecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy.
  ## ex: https://github.com/kubernetes/charts/tree/master/stable/keycloak
  ##
  extraContainers: |

  ## additional volumes, e. g. for secrets used in an extraContainers.
  ##
  extraVolumes: |

## Enable scraping of the /metrics endpoint for Prometheus
metrics:
  prometheus:
    enabled: false

persistence:
  enabled: false

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  #existingClaim:

  ## rabbitmq data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 1Gi

rbac:
  ## Specifies whether RBAC resources should be created
  create: true
  ## RBAC api version (v1, v1beta1, or v1alpha1)
  apiVersion: v1

serviceAccount:
  ## Specifies whether a ServiceAccount should be created
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  name:
